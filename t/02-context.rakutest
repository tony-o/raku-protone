use Test;
use Protone;
use Protone::Context;

plan 3;

my $ctx = Protone::Context.new;

$ctx.compile('hello', :code('hello {{name}}.'));

ok $ctx.run('hello', name => 'tony-o') eq 'hello tony-o.';

$ctx.register('reverse2', -> $s { $s.flip; });

$ctx.compile('olleh', :code('hello {{$out ~= reverse2(%ctx<name>);}}.'));

ok $ctx.run('olleh', name => 'tony-o') eq 'hello o-ynot.';

$ctx.compile('test', :code('{{$out ~= flip %ctx<name>;}}'));

ok $ctx.run('test', name => 'racecar1') eq '1racecar';
